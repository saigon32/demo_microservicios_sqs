package com.dislicores.api.otp.exception;

import java.util.List;

import com.dislicores.api.otp.domain.FieldErrorDto;

/**
 * Clase que permite definir una excepcion personalizada para el manejo de
 * errores en la aplicacion
 * 
 * @author ricardo.ayala@pragma.com.co
 *
 */
public class OtpException extends RuntimeException {

	/**
	 * Serial version
	 */
	private static final long serialVersionUID = -958060418553191973L;
	/**
	 * Valor que permite definir un estado para la respuesta HTTP en caso de que
	 * deba ser propagada desde el origen de la excepcion
	 */
	private final int status;
	/**
	 * Codigo unico que identifique la respuesta para el presente microservicio
	 */
	private final String code;
	/**
	 * Conjunto de campos con errores por obligatoriedad o formato
	 */
	private final List<FieldErrorDto> fieldErrors;

	/**
	 * Constructor para la creacion de excepciones personalizadas sin causa raiz
	 *
	 * @param status
	 * @param code
	 * @param message
	 */
	public OtpException(int status, String code, String message) {
		super(message);
		this.status = status;
		this.code = code;
		this.fieldErrors = null;
	}

	/**
	 * Constructor para la creacion de excepciones personalizadas
	 *
	 * @param status  Estado HTTP
	 * @param code    Codigo de respuesta unico
	 * @param message Mensaje con el detalle del error
	 * @param e       Objeto con la informacion de la cauza raiz de la excepcion
	 */
	public OtpException(int status, String code, String message, Throwable e) {
		super(message, e);
		this.status = status;
		this.code = code;
		this.fieldErrors = null;
	}

	public OtpException(int status, String code, String message, List<FieldErrorDto> fieldErrors) {
		super(message);
		this.status = status;
		this.code = code;
		this.fieldErrors = fieldErrors;
	}

	/**
	 * @return the status
	 */
	public int getStatus() {
		return status;
	}

	/**
	 * @return the code
	 */
	public String getCode() {
		return code;
	}

	/**
	 * @return the fieldErrors
	 */
	public List<FieldErrorDto> getFieldErrors() {
		return fieldErrors;
	}

}
