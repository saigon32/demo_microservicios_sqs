package com.familia.api.otp.rest;

import static com.familia.plugin.utilities.util.UtilConstants.IP_ADDRESS;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.familia.api.otp.business.OtpBusiness;
import com.familia.api.otp.domain.ActivationAccountDTO;
import com.familia.api.otp.domain.OtpDTO;
import com.familia.api.otp.domain.OtpRequestDTO;
import com.familia.plugin.utilities.domain.Response;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@RequestMapping("api/v1/")
@CrossOrigin(origins = "*", methods = { RequestMethod.POST })
@Api("Rest Controller que expone las Apis de generacion de otps para el portal Pomys")
public class OtpRest {

	/** Objeto que expone la logica de negocio */
	private final OtpBusiness otpBusiness;

	/**
	 * Metodo constructor
	 * 
	 */
	@Autowired
	public OtpRest(OtpBusiness otpBusiness) {
		this.otpBusiness = otpBusiness;
	}

	@ApiOperation(value = "Permite enviar una notificaion al usuario con el link de activacion", produces = MediaType.APPLICATION_JSON_VALUE, httpMethod = "POST")
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Se envio la notificacion de manera correcta", response = Response.class),
			@ApiResponse(code = 400, message = "Los datos recibidos no cumplen con la obligatoriedad o formatos esperados", response = Response.class),
			@ApiResponse(code = 500, message = "Ocurre un error dentro del servidor, el cual se puede generar por problemas en el acceso a recursos, consultas de elementos no existentes o errores inesperados") })
	@PostMapping(value = "/activation-code")
	public Response<Boolean> sendActivationCode(
			@ApiParam(value = "email del usuario", required = true, format = "JSON") @RequestBody(required = true) ActivationAccountDTO activationAccountDTO,
			@ApiParam(value = "ip desde donde se realiza la peticion", name = IP_ADDRESS, required = true, type = "String") @RequestHeader(value = IP_ADDRESS, required = true) String ip) {
		return this.otpBusiness.sendActivationCode(activationAccountDTO, ip);
	}
	
	@ApiOperation(value = "Permite validar si un codigo alfa-numerico coincide con un registro Otp vigente para el usuario", produces = MediaType.APPLICATION_JSON_VALUE, httpMethod = "POST")
    @ApiResponses(value = { @ApiResponse(code = 200, message = "El codigo de verificacion es valido", response = Response.class),
            @ApiResponse(code = 400, message = "Los datos recibidos no cumplen con la obligatoriedad o formatos esperados", response = Response.class),
            @ApiResponse(code = 500, message = "Ocurre un error dentro del servidor, el cual se puede generar por problemas en el acceso a recursos, consultas de elementos no existentes o errores inesperados") })
    @PostMapping(value = "/validate-key/{email}/{key}", produces = MediaType.APPLICATION_JSON_VALUE)
    public Response<OtpDTO> validateActivationCode(
            @ApiParam(value = "ip desde donde se realiza la peticion", name = "Ip-Address", required = true, type = "String") @RequestHeader(value = IP_ADDRESS, required = true) String ip,
            @ApiParam(value = "email del usuario", required = true) @PathVariable(value = "email", required = true) String email,
            @ApiParam(value = "Codigo alfa-numerico enviado al usuario para validar la autenticacion", name = "key", required = true, type = "String") @PathVariable(required = true, value = "key") String key) {
        return this.otpBusiness.validateActivationCode(email, key, ip);
    }
	
	 @ApiOperation(value = "Permite enviar al usuario un código alfa-numérico para realizar la autenticación de doble factor", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE, httpMethod = "POST")
	    @ApiResponses(value = {
	            @ApiResponse(code = 200, message = "El código de verificación ha sido enviado exitosamente", response = Response.class),
	            @ApiResponse(code = 400, message = "Los datos recibidos no cumplen con la obligatoriedad o formatos esperados", response = Response.class),
	            @ApiResponse(code = 500, message = "Ocurre un error dentro del servidor, el cual se puede generar por problemas en el acceso a recursos, consultas de elementos no existentes o errores inesperados", response = Response.class) })
	    @PostMapping(value = "/otp", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	    public Response<Void> sendOtpCode(
	            @ApiParam(value = "Header de autenticación del usuario en sesión", required = true) @RequestHeader(value = "Authorization", required = true) String jwt,
	            @ApiParam(value = "Objeto JSON con la informacion del destino del codigo OTP", name = "request", required = true, type = "JSON") @RequestBody(required = true) OtpRequestDTO request,
	            @ApiParam(value = "ip desde donde se realiza la peticion", name = "Ip-Address", required = true, type = "String") @RequestHeader(value = IP_ADDRESS, required = true) String ip) {
	        return this.otpBusiness.sendOtpCode(jwt, request, ip);
	    }
}
